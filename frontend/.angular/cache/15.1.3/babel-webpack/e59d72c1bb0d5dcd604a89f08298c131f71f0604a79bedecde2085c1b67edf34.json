{"ast":null,"code":"import { Inject, Injectable, InjectionToken, PLATFORM_ID } from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\n\n// This service is based on the `ng2-cookies` package which sadly is not a service and does\n// not use `DOCUMENT` injection and therefore doesn't work well with AoT production builds.\n// Package: https://github.com/BCJTI/ng2-cookies\nimport * as ɵngcc0 from '@angular/core';\nlet CookieService = /*#__PURE__*/(() => {\n  class CookieService {\n    /**\n     * @param {?} document\n     * @param {?} platformId\n     */\n    constructor(document, platformId) {\n      this.document = document;\n      this.platformId = platformId;\n      this.documentIsAccessible = isPlatformBrowser(this.platformId);\n    }\n    /**\n     * @param {?} name Cookie name\n     * @return {?}\n     */\n    check(name) {\n      if (!this.documentIsAccessible) {\n        return false;\n      }\n      name = encodeURIComponent(name);\n      const /** @type {?} */regExp = this.getCookieRegExp(name);\n      const /** @type {?} */exists = regExp.test(this.document.cookie);\n      return exists;\n    }\n    /**\n     * @param {?} name Cookie name\n     * @return {?}\n     */\n    get(name) {\n      if (this.documentIsAccessible && this.check(name)) {\n        name = encodeURIComponent(name);\n        const /** @type {?} */regExp = this.getCookieRegExp(name);\n        const /** @type {?} */result = regExp.exec(this.document.cookie);\n        return decodeURIComponent(result[1]);\n      } else {\n        return '';\n      }\n    }\n    /**\n     * @return {?}\n     */\n    getAll() {\n      if (!this.documentIsAccessible) {\n        return {};\n      }\n      const /** @type {?} */cookies = {};\n      const /** @type {?} */document = this.document;\n      if (document.cookie && document.cookie !== '') {\n        const /** @type {?} */split = document.cookie.split(';');\n        for (let /** @type {?} */i = 0; i < split.length; i += 1) {\n          const /** @type {?} */currentCookie = split[i].split('=');\n          currentCookie[0] = currentCookie[0].replace(/^ /, '');\n          cookies[decodeURIComponent(currentCookie[0])] = decodeURIComponent(currentCookie[1]);\n        }\n      }\n      return cookies;\n    }\n    /**\n     * @param {?} name     Cookie name\n     * @param {?} value    Cookie value\n     * @param {?=} expires  Number of days until the cookies expires or an actual `Date`\n     * @param {?=} path     Cookie path\n     * @param {?=} domain   Cookie domain\n     * @param {?=} secure   Secure flag\n     * @param {?=} sameSite OWASP samesite token `Lax`, `None`, or `Strict`. Defaults to `None`\n     * @return {?}\n     */\n    set(name, value, expires, path, domain, secure, sameSite = 'None') {\n      if (!this.documentIsAccessible) {\n        return;\n      }\n      let /** @type {?} */cookieString = encodeURIComponent(name) + '=' + encodeURIComponent(value) + ';';\n      if (expires) {\n        if (typeof expires === 'number') {\n          const /** @type {?} */dateExpires = new Date(new Date().getTime() + expires * 1000 * 60 * 60 * 24);\n          cookieString += 'expires=' + dateExpires.toUTCString() + ';';\n        } else {\n          cookieString += 'expires=' + expires.toUTCString() + ';';\n        }\n      }\n      if (path) {\n        cookieString += 'path=' + path + ';';\n      }\n      if (domain) {\n        cookieString += 'domain=' + domain + ';';\n      }\n      if (secure) {\n        cookieString += 'secure;';\n      }\n      cookieString += 'sameSite=' + sameSite + ';';\n      this.document.cookie = cookieString;\n    }\n    /**\n     * @param {?} name   Cookie name\n     * @param {?=} path   Cookie path\n     * @param {?=} domain Cookie domain\n     * @return {?}\n     */\n    delete(name, path, domain) {\n      if (!this.documentIsAccessible) {\n        return;\n      }\n      this.set(name, '', new Date('Thu, 01 Jan 1970 00:00:01 GMT'), path, domain, undefined, 'Lax');\n    }\n    /**\n     * @param {?=} path   Cookie path\n     * @param {?=} domain Cookie domain\n     * @return {?}\n     */\n    deleteAll(path, domain) {\n      if (!this.documentIsAccessible) {\n        return;\n      }\n      const /** @type {?} */cookies = this.getAll();\n      for (const /** @type {?} */cookieName in cookies) {\n        if (cookies.hasOwnProperty(cookieName)) {\n          this.delete(cookieName, path, domain);\n        }\n      }\n    }\n    /**\n     * @param {?} name Cookie name\n     * @return {?}\n     */\n    getCookieRegExp(name) {\n      const /** @type {?} */escapedName = name.replace(/([\\[\\]\\{\\}\\(\\)\\|\\=\\;\\+\\?\\,\\.\\*\\^\\$])/ig, '\\\\$1');\n      return new RegExp('(?:^' + escapedName + '|;\\\\s*' + escapedName + ')=(.*?)(?:;|$)', 'g');\n    }\n  }\n  CookieService.ɵfac = function CookieService_Factory(t) {\n    return new (t || CookieService)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(PLATFORM_ID));\n  };\n  CookieService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: CookieService,\n    factory: CookieService.ɵfac\n  });\n  /**\n   * @nocollapse\n   */\n  return CookieService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CookieService };\n\n//# sourceMappingURL=ngx-cookie-service.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}