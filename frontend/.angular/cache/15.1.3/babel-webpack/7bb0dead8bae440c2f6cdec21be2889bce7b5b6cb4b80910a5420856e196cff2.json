{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { HttpClient } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { apiUrl } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nvar FileUploadService = /** @class */function () {\n  function FileUploadService(http) {\n    this.http = http;\n    this.cnnUrl = \"\".concat(apiUrl, \"/cnn\");\n    // API url\n    this.baseApiUrl = \"https://file.io\";\n  }\n  FileUploadService.prototype.getCategoryRoute = function (imagelink, filename) {\n    var url = \"\".concat(this.cnnUrl, \"?ImageLink=\").concat(imagelink, \"&&FileName=\").concat(filename);\n    return this.http.get(url).pipe(\n\n      // tap(_ => console.log(_)),\n    );\n  };\n  // Returns an observable\n  FileUploadService.prototype.upload = function (file) {\n    return __awaiter(this, void 0, void 0, function () {\n      var formData, element;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            formData = new FormData();\n            // Store form name as \"file\" with file data\n            formData.append(\"file\", file, file.name);\n            return [4 /*yield*/, this.http.post(this.baseApiUrl, formData)];\n          case 1:\n            element = _a.sent();\n            return [2 /*return*/, this.getCategoryRoute(element[\"link\"], element[\"key\"] + \".js\")];\n        }\n      });\n    });\n  };\n  /**\r\n   * Handle Http operation that failed.\r\n   * Let the app continue.\r\n   * @param operation - name of the operation that failed\r\n   * @param result - optional value to return as the observable result\r\n   */\n  FileUploadService.prototype.handleError = function (operation, result) {\n    if (operation === void 0) {\n      operation = 'operation';\n    }\n    return function (error) {\n      console.error(error); // log to console instead\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  };\n  FileUploadService.ɵfac = function FileUploadService_Factory(t) {\n    return new (t || FileUploadService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  FileUploadService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FileUploadService,\n    factory: FileUploadService.ɵfac,\n    providedIn: 'root'\n  });\n  return FileUploadService;\n}();\nexport { FileUploadService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}