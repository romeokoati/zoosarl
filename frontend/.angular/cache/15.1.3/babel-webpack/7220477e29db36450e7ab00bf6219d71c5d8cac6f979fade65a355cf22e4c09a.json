{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { ProductInfo } from '../models/productInfo';\nimport { apiUrl } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nvar ProductService = /** @class */function () {\n  function ProductService(http) {\n    this.http = http;\n    this.productUrl = \"\".concat(apiUrl, \"/product\");\n    this.categoryUrl = \"\".concat(apiUrl, \"/category\");\n  }\n  ProductService.prototype.getAllInPage = function (page, size) {\n    var url = \"\".concat(this.productUrl, \"?page=\").concat(page, \"&size=\").concat(size);\n    return this.http.get(url).pipe(\n\n      // tap(_ => console.log(_)),\n    );\n  };\n  ProductService.prototype.getCategoryInPage = function (categoryType, page, size) {\n    var url = \"\".concat(this.categoryUrl, \"/\").concat(categoryType, \"?page=\").concat(page, \"&size=\").concat(size);\n    return this.http.get(url).pipe(\n      // tap(data => console.log(data))\n    );\n  };\n  ProductService.prototype.getDetail = function (id) {\n    var url = \"\".concat(this.productUrl, \"/\").concat(id);\n    return this.http.get(url).pipe(catchError(function (_) {\n      console.log(\"Get Detail Failed\");\n      return of(new ProductInfo());\n    }));\n  };\n  ProductService.prototype.update = function (productInfo) {\n    var url = \"\".concat(apiUrl, \"/seller/product/\").concat(productInfo.productId, \"/edit\");\n    return this.http.put(url, productInfo);\n  };\n  ProductService.prototype.create = function (productInfo) {\n    var url = \"\".concat(apiUrl, \"/seller/product/new\");\n    return this.http.post(url, productInfo);\n  };\n  ProductService.prototype.delelte = function (productInfo) {\n    var url = \"\".concat(apiUrl, \"/seller/product/\").concat(productInfo.productId, \"/delete\");\n    return this.http.delete(url);\n  };\n  /**\r\n   * Handle Http operation that failed.\r\n   * Let the app continue.\r\n   * @param operation - name of the operation that failed\r\n   * @param result - optional value to return as the observable result\r\n   */\n  ProductService.prototype.handleError = function (operation, result) {\n    if (operation === void 0) {\n      operation = 'operation';\n    }\n    return function (error) {\n      console.error(error); // log to console instead\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  };\n  ProductService.ɵfac = function ProductService_Factory(t) {\n    return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  ProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductService,\n    factory: ProductService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProductService;\n}();\nexport { ProductService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}