{"ast":null,"code":"import { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport { UserService } from \"../services/user.service\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/user.service\";\nvar AuthGuard = /** @class */function () {\n  function AuthGuard(router, userService) {\n    this.router = router;\n    this.userService = userService;\n  }\n  AuthGuard.prototype.canActivate = function (route, state) {\n    var currentUser = this.userService.currentUserValue;\n    if (currentUser) {\n      // check if route is restricted by role\n      if (route.data.roles && route.data.roles.indexOf(currentUser.role) === -1) {\n        console.log(currentUser.role + \"fail in \" + route.data.roles);\n        // role not authorised so redirect to home page\n        this.router.navigate(['/']);\n        return false;\n      }\n      // authorised so return true\n      return true;\n    }\n    console.log(\"Need log in\");\n    // not logged in so redirect to login page with the return url{queryParams: {returnUrl: state.url}}\n    this.router.navigate(['/login'], {\n      queryParams: {\n        returnUrl: state.url\n      }\n    });\n    return false;\n  };\n  AuthGuard.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.UserService));\n  };\n  AuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthGuard;\n}();\nexport { AuthGuard };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}