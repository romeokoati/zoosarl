{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { apiUrl } from '../../environments/environment';\nimport { BehaviorSubject, of, Subject } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { CookieService } from 'ngx-cookie-service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-cookie-service\";\nvar UserService = /** @class */function () {\n  function UserService(http, cookieService) {\n    this.http = http;\n    this.cookieService = cookieService;\n    this.nameTerms = new Subject();\n    this.name$ = this.nameTerms.asObservable();\n    var memo = localStorage.getItem('currentUser');\n    this.currentUserSubject = new BehaviorSubject(JSON.parse(memo));\n    this.currentUser = this.currentUserSubject.asObservable();\n    cookieService.set('currentUser', memo);\n  }\n  Object.defineProperty(UserService.prototype, \"currentUserValue\", {\n    get: function () {\n      return this.currentUserSubject.value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  UserService.prototype.login = function (loginForm) {\n    var _this = this;\n    var url = \"\".concat(apiUrl, \"/login\");\n    return this.http.post(url, loginForm).pipe(tap(function (user) {\n      if (user && user.token) {\n        _this.cookieService.set('currentUser', JSON.stringify(user));\n        if (loginForm.remembered) {\n          localStorage.setItem('currentUser', JSON.stringify(user));\n        }\n        console.log(user.name);\n        _this.nameTerms.next(user.name);\n        _this.currentUserSubject.next(user);\n        return user;\n      }\n    }), catchError(this.handleError('Login Failed', null)));\n  };\n  UserService.prototype.logout = function () {\n    this.currentUserSubject.next(null);\n    localStorage.removeItem('currentUser');\n    this.cookieService.delete('currentUser');\n  };\n  UserService.prototype.signUp = function (user) {\n    var url = \"\".concat(apiUrl, \"/register\");\n    return this.http.post(url, user);\n  };\n  UserService.prototype.update = function (user) {\n    var url = \"\".concat(apiUrl, \"/profile\");\n    return this.http.put(url, user);\n  };\n  UserService.prototype.get = function (email) {\n    var url = \"\".concat(apiUrl, \"/profile/\").concat(email);\n    return this.http.get(url);\n  };\n  /**\r\n   * Handle Http operation that failed.\r\n   * Let the app continue.\r\n   * @param operation - name of the operation that failed\r\n   * @param result - optional value to return as the observable result\r\n   */\n  UserService.prototype.handleError = function (operation, result) {\n    if (operation === void 0) {\n      operation = 'operation';\n    }\n    return function (error) {\n      console.log(error); // log to console instead\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  };\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CookieService));\n  };\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n}();\nexport { UserService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}